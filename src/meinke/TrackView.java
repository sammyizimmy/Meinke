/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package meinke;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.MouseInputListener;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.input.CenterMapListener;
import org.jxmapviewer.input.PanKeyListener;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCursor;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.TileFactoryInfo;

/**
 *
 * @author classic
 */
public class TrackView extends JPanel {

    JXMapViewer mv;
    /**
     * Creates new form TrackView
     */
    public TrackView() {
        initComponents();

        mv = new JXMapViewer();
        // Add interactions
        MouseInputListener mia = new PanMouseInputListener(mv);
        mv.addMouseListener(mia);
        mv.addMouseMotionListener(mia);

        mv.addMouseListener(new CenterMapListener(mv));

        mv.addMouseWheelListener(new ZoomMouseWheelListenerCursor(mv));
        mv.addKeyListener(new PanKeyListener(mv));
        this.add(mv);

    }
    
    public void setTileFactoryInfo(TileFactoryInfo tfi){
        DefaultTileFactory tileFactory = new DefaultTileFactory(tfi);
        mv.setTileFactory(tileFactory);
        tileFactory.setThreadPoolSize(8);
    }

    public void bestfit(List<GPXProcessor> gpxtracks) {
        double minLAT = 0,maxLAT = 0,minLONG = 0,maxLONG = 0;
        for (int i = 0; i < gpxtracks.size(); i++) {
            GPXProcessor gpx = gpxtracks.get(i);
            if (i == 0) {
                minLAT = gpx.minLAT;
                maxLAT = gpx.maxLAT;
                minLONG = gpx.minLONG;
                maxLONG = gpx.maxLONG;
            } else {
                //get min/max Latitude
                if (gpx.minLAT < minLAT) {
                    minLAT = gpx.minLAT;
                }
                if (gpx.maxLAT > maxLAT) {
                    maxLAT = gpx.maxLAT;
                }
                //get min/max Latitude
                if (gpx.minLONG < minLONG) {
                    minLONG = gpx.minLONG;
                }
                if (gpx.maxLONG > maxLONG) {
                    maxLONG = gpx.maxLONG;
                }
            }
        }
        mv.zoomToBestFit(new HashSet<>(Arrays.asList(
                new GeoPosition(maxLAT, maxLONG),
                new GeoPosition(maxLAT, minLONG),
                new GeoPosition(minLAT, maxLONG),
                new GeoPosition(minLAT, minLONG)
        )), 0.75);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("jLabel1");
        add(jLabel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
       
    }//GEN-LAST:event_formKeyPressed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
